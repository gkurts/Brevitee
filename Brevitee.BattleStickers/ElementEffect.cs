using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Brevitee;

namespace Brevitee.BattleStickers
{
    public class ElementEffect
    {
        public ElementEffect()
        {
            this.Multiplier = 1;
            this.LowerBound = 1;
            this.UpperBound = 10;
            this.Message = "NO ELEMENT EFFECT";
        }

        public ElementEffect(int multiplier, int lowerBound, int upperBound)
            : this()
        {
            this.Multiplier = multiplier;
            this.LowerBound = lowerBound;
            this.UpperBound = upperBound;
        }

        public int LowerBound { get; set; }
        public int UpperBound { get; set; }
        public int Multiplier { get; set; }
        public EffectDirection Direction { get; private set; }

        public string Message { get; private set; }
        public Elements Target { get; set; }
        public Elements Invoker { get; set; }

        private void SetDirection()
        {
            switch (Target)
            {
                case Elements.Earth:
                    switch (Invoker)
                    {
                        case Elements.Earth:
                            Message = "EARTH->EARTH: EFFECT DECREASED";
                            Direction = EffectDirection.Minus;
                            break;
                        case Elements.Air:
                            Message = "EARTH->AIR: EFFECT INCREASED";
                            Direction = EffectDirection.Plus;
                            break;
                    }
                    break;
                case Elements.Air:
                    switch (Invoker)
                    {
                        case Elements.Air:
                            Message = "AIR->AIR: EFFECT DECREASED";
                            Direction = EffectDirection.Minus;
                            break;
                        case Elements.Water:
                            Message = "AIR->WATER: EFFECT INCREASED";
                            Direction = EffectDirection.Plus;
                            break;
                    }
                    break;
                case Elements.Water:
                    switch (Invoker)
                    {
                        case Elements.Water:
                            Message = "WATER->WATER: EFFECT DECREASED";
                            Direction = EffectDirection.Minus;
                            break;
                        case Elements.Fire:
                            Message = "WATER->FIRE: EFFECT INCREASED";
                            Direction = EffectDirection.Plus;
                            break;
                    }
                    break;
                case Elements.Fire:
                    switch (Invoker)
                    {
                        case Elements.Earth:
                            Message = "FIRE->EARTH: EFFECT INCREASED";
                            Direction = EffectDirection.Plus;
                            break;
                        case Elements.Fire:
                            Message = "FIRE->FIRE: EFFECT DECREASED";
                            Direction = EffectDirection.Minus;
                            break;
                    }
                    break;
            }

        }

        /// <summary>
        /// Cause the effect using a new random value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public int CauseNew(int value)
        {
            int result = value;
            switch (Direction)
            {
                case EffectDirection.None:
                    break;
                case EffectDirection.Plus:
                    result = value + GetValue();
                    break;
                case EffectDirection.Minus:
                    result = value - GetValue();
                    break;
            }
            return result;
        }

        public int Cause(int value)
        {
            int result = value;
            switch (Direction)
            {
                case EffectDirection.None:
                    break;
                case EffectDirection.Plus:
                    result = value + LastValue;
                    break;
                case EffectDirection.Minus:
                    result = value - LastValue;
                    break;
            }
            return result;
        }

        int _lastValue = 0;
        /// <summary>
        /// Represents the most recent value generated by this ElementEffect
        /// </summary>
        public int LastValue
        {
            get
            {
                if (_lastValue == 0)
                {
                    _lastValue = GetValue();
                }

                return _lastValue;
            }
            private set
            {
                _lastValue = value;
            }
        }

        public int GetValue()
        {
            SetDirection();
            LastValue = RandomNumber.Between(LowerBound, UpperBound) * Multiplier;
            return LastValue;
        }

        public override string ToString()
        {
            return GetValue().ToString();
        }
    }
}
