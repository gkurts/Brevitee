<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Brevitee.Users</name>
    </assembly>
    <members>
        <member name="M:Brevitee.Users.EasyRoleProvider.InitializeFromConfig">
            <summary>
            Initialize roles from the config file.  This will look for the 
            appSetting with the key "Roles" and assume that it is a
            semi-colon (;) separated list of key value pairs delimited by colons (:)
            where the key is the name of a role to initialize and the 
            value is a comma separated list of users to create and add to 
            the role.
            </summary>
        </member>
        <member name="M:Brevitee.Users.Data.Account.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.Account.Where(System.Func{Brevitee.Users.Data.AccountColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.AccountColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.AccountColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a AccountColumns 
            and returns a QueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Account.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Account.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Account instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Account.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Account.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.AccountColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Create(Brevitee.Users.Data.User,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new Confirmation with the Created and
            Token properties set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.Account.Expire">
            <summary>
            Expires the confirmation by setting the Created property to DateTime.MinValue
            </summary>
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.Where(System.Func{Brevitee.Users.Data.LockOutColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.LockOutColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.LockOutColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LockOutColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.LockOut.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.LockOut.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single LockOut instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.LockOut.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.LockOut.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.LockOut.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LockOutColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Login.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.Login.Where(System.Func{Brevitee.Users.Data.LoginColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.LoginColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.LoginColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LoginColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Login.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Login.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Login.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Login.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Login instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Login.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Login.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Login.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Login.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Login.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.LoginColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Password.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.Password.Where(System.Func{Brevitee.Users.Data.PasswordColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.PasswordColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Password.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Password.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Password.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Password.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Password instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Password.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Password.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Password.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Password.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Password.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.Where(System.Func{Brevitee.Users.Data.PasswordFailureColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.PasswordFailureColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordFailureColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordFailureColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.PasswordFailure.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.PasswordFailure.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single PasswordFailure instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.PasswordFailure.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.PasswordFailure.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordFailure.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordFailureColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.Where(System.Func{Brevitee.Users.Data.PasswordQuestionColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.PasswordQuestionColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordQuestionColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordQuestionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.PasswordQuestion.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.PasswordQuestion.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single PasswordQuestion instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.PasswordQuestion.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.PasswordQuestion.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordQuestion.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordQuestionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Where(System.Func{Brevitee.Users.Data.PasswordResetColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.PasswordResetColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordResetColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordResetColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.PasswordReset.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.PasswordReset.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single PasswordReset instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.PasswordReset.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.PasswordReset.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.PasswordResetColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.PasswordReset.Create(Brevitee.Users.Data.User,System.Int32)">
            <summary>
            Create a PasswordReset window
            </summary>
            <param name="user"></param>
            <param name="expiresInMinutesFromNow"></param>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.Role.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.Role.Where(System.Func{Brevitee.Users.Data.RoleColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.RoleColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.RoleColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a RoleColumns 
            and returns a QueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Role.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Role.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Role.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Role.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Role instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Role.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Role.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Role.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Role.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Role.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.RoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.Session.Where(System.Func{Brevitee.Users.Data.SessionColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.SessionColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.SessionColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SessionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Session.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Session.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Session instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Session.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Session.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Get(Brevitee.Users.Data.User,System.Boolean)">
            <summary>
            Get a Session instance for the specified userName, it will 
            be created if it doesn't exist
            </summary>
            <param name="userName"></param>
            <param name="isActive"></param>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.Session.Touch(System.Boolean)">
            <summary>
            Updates the LastActivity property and sets IsActive to true
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.Where(System.Func{Brevitee.Users.Data.SessionStateColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.SessionStateColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.SessionStateColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SessionStateColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.SessionState.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.SessionState.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single SessionState instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.SessionState.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.SessionState.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.SessionState.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SessionStateColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Setting.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.Setting.Where(System.Func{Brevitee.Users.Data.SettingColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.SettingColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.SettingColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SettingColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Setting.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Setting.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Setting.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Setting.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Setting instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.Setting.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.Setting.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Setting.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Setting.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.Setting.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.SettingColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.User.Where(System.Func{Brevitee.Users.Data.UserColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.UserColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.User.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.User.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single User instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.User.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.User.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.User.GetByUserNameOrDie(System.String)">
            <summary>
            Get the User object for the specified userName or throw 
            an InvalidOperationException if they are not found
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.User.Ensure(System.String)">
            <summary>
            Ensures that the User with the specified userName 
            exists in the database
            </summary>
            <param name="userName"></param>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.User.GetByUserName(System.String)">
            <summary>
            Get the user with the specified userName or null if the user is not found
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.User.GetByEmail(System.String)">
            <summary>
            Get the user with the specified email address
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.Where(System.Func{Brevitee.Users.Data.UserBehaviorColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.UserBehaviorColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserBehaviorColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserBehaviorColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.UserBehavior.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.UserBehavior.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserBehavior instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.UserBehavior.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.UserBehavior.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserBehavior.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserBehaviorColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.GetUniqueFilter">
            <summary>
            Gets a query filter that will should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance.
            </summary> 
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.Where(System.Func{Brevitee.Users.Data.UserRoleColumns,Brevitee.Data.QueryFilter{Brevitee.Users.Data.UserRoleColumns}},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserRoleColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserRoleColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.Where(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.UserRole.Where(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.UserRole.OneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserRole instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Brevitee.Users.Data.UserRole.OneWhere(Brevitee.Data.Qi.QiQuery,Brevitee.Data.Database)" -->
        <member name="M:Brevitee.Users.Data.UserRole.FirstOneWhere(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the first result
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.Top(System.Int32,Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.OrderBy{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the specified count
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Brevitee.Users.Data.UserRole.Count(Brevitee.Data.WhereDelegate{Brevitee.Users.Data.UserRoleColumns},Brevitee.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
    </members>
</doc>
