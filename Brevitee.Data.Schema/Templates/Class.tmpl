// Model is Table
using System;
using System.Data;
using System.Data.Common;
using Brevitee;
using Brevitee.Data;
using Brevitee.Data.Qi;

namespace @Namespace
{
	// schema = @Schema.Name
	// connection Name = @Model.ConnectionName
	[Brevitee.Data.Table("@Model.Name", "@Schema.Name")]
	public partial class @Model.ClassName: Dao
	{
		public @(Model.ClassName)():base()
		{
			this.SetKeyColumnName();
			this.SetChildren();
		}

		public @(Model.ClassName)(DataRow data): base(data)
		{
			this.SetKeyColumnName();
			this.SetChildren();
		}

		public static implicit operator @(Model.ClassName)(DataRow data)
		{
			return new @(Model.ClassName)(data);
		}

		private void SetChildren()
		{
			@foreach(ForeignKeyColumn fk in Model.ReferencingForeignKeys)
			{
				WriteAddToChildDaoCollection(fk);
			}	 
			@foreach(XrefInfo xref in Schema.LeftXrefsFor(Model.Name))
			{
				WriteAddToChildDaoCollection(xref);
			} 
			@foreach(XrefInfo xref in Schema.RightXrefsFor(Model.Name))
			{
				WriteAddToChildDaoCollection(xref);
			}

		}

		@foreach(Column column in Model.Columns)
		{
			WriteClassProperty(column);
		}

		@{	
			int fkCount = 0;
		}
		@foreach(ForeignKeyColumn fk in Model.ForeignKeys)
		{
			fkCount++;
			WriteForeignKeyColumnProperty(fk, fkCount);
		}
				
		@foreach(ForeignKeyColumn fk in Model.ReferencingForeignKeys)
		{
			WriteReferencingList(fk);
		}
		
		@foreach(XrefInfo xref in Schema.LeftXrefsFor(Model.Name))
		{
			WriteXrefProperty(xref);
		}

		@foreach(XrefInfo xref in Schema.RightXrefsFor(Model.Name))
		{
			WriteXrefProperty(xref);
		} 
		/// <summary>
		/// Gets a query filter that should uniquely identify
		/// the current instance.  The default implementation
		/// compares the Id/key field to the current instance.
		/// </summary> 
		public override IQueryFilter GetUniqueFilter()
		{
			var colFilter = new @(Model.ClassName)Columns();
			return (colFilter.KeyColumn == IdValue);
		}
		/// <summary>
		/// Return every record in the @(Model.ClassName) table.
		/// </summary>
		/// <param name="database">
		/// The database to load from or null
		/// </param>
		public static @(Model.ClassName)Collection LoadAll(Database database = null)
		{
			SqlStringBuilder sql = new SqlStringBuilder();
			sql.Select<@(Model.ClassName)>();
			Database db = database ?? Db.For<@(Model.ClassName)>();
			var results = new @(Model.ClassName)Collection(sql.GetDataTable(db));
			results.Database = db;
			return results;
		}

		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A Func delegate that recieves a @(Model.ClassName)Columns 
		/// and returns a QueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Where(Func<@(Model.ClassName)Columns, QueryFilter<@(Model.ClassName)Columns>> where, OrderBy<@(Model.ClassName)Columns> orderBy = null)
		{
			return new @(Model.ClassName)Collection(new Query<@(Model.ClassName)Columns, @(Model.ClassName)>(where, orderBy), true);
		}
		
		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Where(WhereDelegate<@(Model.ClassName)Columns> where, Database db = null)
		{
			var results = new @(Model.ClassName)Collection(db, new Query<@(Model.ClassName)Columns, @(Model.ClassName)>(where, db), true);
			return results;
		}
		   
		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="orderBy">
		/// Specifies what column and direction to order the results by
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Where(WhereDelegate<@(Model.ClassName)Columns> where, OrderBy<@(Model.ClassName)Columns> orderBy = null, Database db = null)
		{
			var results = new @(Model.ClassName)Collection(db, new Query<@(Model.ClassName)Columns, @(Model.ClassName)>(where, orderBy, db), true);
			return results;
		}

		/// <summary>
		/// This method is intended to respond to client side Qi queries.
		/// Use of this method from .Net should be avoided in favor of 
		/// one of the methods that take a delegate of type
		/// WhereDelegate<@(Model.ClassName)Columns>.
		/// </summary>
		/// <param name="where"></param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Where(QiQuery where, Database db = null)
		{
			var results = new @(Model.ClassName)Collection(db, Select<@(Model.ClassName)Columns>.From<@(Model.ClassName)>().Where(where, db));
			return results;
		}

		/// <summary>
		/// Execute a query that should return only one result.  If more
		/// than one result is returned a MultipleEntriesFoundException will 
		/// be thrown.  This method is most commonly used to retrieve a
		/// single @Model.ClassName instance by its Id/Key value
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName) OneWhere(WhereDelegate<@(Model.ClassName)Columns> where, Database db = null)
		{
			var results = new @(Model.ClassName)Collection(db, Select<@(Model.ClassName)Columns>.From<@(Model.ClassName)>().Where(where, db));
			return OneOrThrow(results);
		}
			 
		/// <summary>
		/// This method is intended to respond to client side Qi queries.
		/// Use of this method from .Net should be avoided in favor of 
		/// one of the methods that take a delegate of type
		/// WhereDelegate<@(Model.ClassName)Columns>.
		/// </summary>
		/// <param name="where"></param>
		/// <param name="db"></param>
		public static @(Model.ClassName) OneWhere(QiQuery where, Database db = null)
		{
			var results = new @(Model.ClassName)Collection(db, Select<@(Model.ClassName)Columns>.From<@(Model.ClassName)>().Where(where, db));
			return OneOrThrow(results);
		}

		private static @(Model.ClassName) OneOrThrow(@(Model.ClassName)Collection c)
		{
			if(c.Count == 1)
			{
				return c[0];
			}
			else if(c.Count > 1)
			{
				throw new MultipleEntriesFoundException();
			}

			return null;
		}

		/// <summary>
		/// Execute a query and return the first result
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName) FirstOneWhere(WhereDelegate<@(Model.ClassName)Columns> where, Database db = null)
		{
			var results = new @(Model.ClassName)Collection(db, Select<@(Model.ClassName)Columns>.From<@(Model.ClassName)>().Where(where, db));
			if(results.Count > 0)
			{
				return results[0];
			}
			else
			{
				return null;
			}
		}

		/// <summary>
		/// Execute a query and return the specified number
		/// of values
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Top(int count, WhereDelegate<@(Model.ClassName)Columns> where, Database db = null)
		{
			return Top(count, where, null, db);
		}

		/// <summary>
		/// Execute a query and return the specified count
		/// of values
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="orderBy">
		/// Specifies what column and direction to order the results by
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Top(int count, WhereDelegate<@(Model.ClassName)Columns> where, OrderBy<@(Model.ClassName)Columns> orderBy, Database database = null)
		{
			@(Model.ClassName)Columns c = new @(Model.ClassName)Columns();
			IQueryFilter filter = where(c);         
			
			Database db = database == null ? Db.For<@(Model.ClassName)>(): database;
			QuerySet query = GetQuerySet(db); 
			query.Top<@(Model.ClassName)>(count);
			query.Where(filter);

			if(orderBy != null)
			{
				query.OrderBy<@(Model.ClassName)Columns>(orderBy);
			}

			query.Execute(db);
			var results = query.Results.As<@(Model.ClassName)Collection>(0);
			results.Database = db;
			return results;
		}

		/// <summary>
		/// Execute a query and return the number of results
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static long Count(WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{
			@(Model.ClassName)Columns c = new @(Model.ClassName)Columns();
			IQueryFilter filter = where(c) ;

			Database db = database == null ? Db.For<@(Model.ClassName)>(): database;
			QuerySet query = GetQuerySet(db);	 
			query.Count<@(Model.ClassName)>();
			query.Where(filter);	  
			query.Execute(db);
			return query.Results.As<CountResult>(0).Value;
		}
	}
}																								
